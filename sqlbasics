SELECT name FROM people; # don't forget the SEMICOLON
SELECT 'hello world' AS result; # result is made into a column in output table
# relational database -> collection of tables; row -> record; column -> field
SELECT * FROm films; # selects ALL COLUMNS
SELECT DISTINCT country FROM films; # only UNIQUE items
SELECT COUNT(*) FROM people;
SELECT COUNT(birthdate) FROM people; # only NON-MISSING values
SELECT COUNT(DISTINCT birthdate) FROM people; # unique non-missing values

# FILTERING

SELECT COUNT(*) FROM films WHERE release_year<2000;
SELECT name,birthdate FROM people WHERE birthdate='1974-11-11'; # notice the DATE FORMAT
SELECT name,birthdate FROM people WHERE condition1 AND condition2; # MULTIPLE filter
SELECT title,release_year FROM films WHERE release_year BETWEEN 1990 AND 2000;
SELECT title,release_year FROM films WHERE release_year IN (1990, 1993, 2005);
SELECT name FROM people WHERE deathdate is NULL;
# % -> zero/one/many; _ -> single; 
SELECT name FROM people WHERE name NOT LIKE 'A%';

# AGGREGATE FUNCTION - AVG, MIN, MAX, SUM

SELECT AVG(duration) FROM films; # the name of the column is AVG
SELECT (4*3) as result; # we can do ARITHMETIC
SELECT (4.0/3.0) as result; # FLoating point arithmetic
SELECT MAX(budget) AS max_budget, MAX(duration) AS max_duration FROM films; # change the title of columns on output
SELECT AVG(duration)/60.0 FROM films; # arithmatic needs to be outside aggregate function. 
# Also, title (non-aggregate) cannot be combined with aggregate function

# SORTING

SELECT name FROM people ORDER BY name; # order by the same attribute that is being displayed
SELECT birthdate,name FROM people ORDER BY birthdate, name; # the OREDRING is important 

# GROUPING - used with aggregate functions

SELECT sex, count(*) FROM employees GROUP BY sex;
SELECT release_year, count(*) FROM films GROUP BY release_year;
SELECT release_year, MAX(budget) FROM films GROUP BY release_year;
SELECT release_year, country, MAX(budget) FROM films GROUP BY release_year, country ORDER BY release_year, country;
# If there is a non-aggregate item in GROUP BY, it must be in SELECT


# HAVING + GROUP BY - aggregate functions can't be used in WHERE clauses
SELECT release_year,AVG(budget), AVG(gross) AS avg_gross 
FROM films GROUP BY release_year HAVING release_year>1990;
SELECT release_year,AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
GROUP BY release_year
HAVING release_year>1990 and AVG(budget)>60000000
ORDER BY AVG(gross) DESC;

SELECT country, AVG(budget) AS avg_budget, avg(gross) AS avg_gross
from films
GROUP BY country
HAVING COUNT(title)>10
ORDER BY country
LIMIT 5;

SELECT title, imdb_score
FROM films
JOIN reviews
ON films.id = reviews.film_id
WHERE title = 'To Kill a Mockingbird'; 







